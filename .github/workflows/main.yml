name: Build and Release Cross-Platform Executables

on:
  push:
    tags:
      - '*'  # 匹配所有 tag，例如 v1.0.0
  workflow_dispatch:  # 手动触发

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Python 环境
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 缓存 pip 依赖
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 安装 UPX
      - name: Install UPX
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: |
          if [ "${{ matrix.os }}" = "Ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y upx-ucl
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install upx
          fi

      # 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests qrcode
          # 如果有 requirements.txt，替换为：
          # pip install -r requirements.txt

      # 打包可执行文件
      - name: Build with PyInstaller
        run: |
          pyinstaller bili-hardcore.spec --noconfirm

      # 上传单文件可执行程序作为 artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bili-hardcore-${{ matrix.os }}-${{ github.event_name == 'push' && github.ref_name || github.sha }}
          path: dist/bili-hardcore*
          retention-days: 7

      # 检查是否已存在 Release（仅在 tag 触发时）
      - name: Check for existing Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: check_release
        shell: bash  # 强制使用 Bash 解释器
        run: |
          release_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | jq -r '.url')
          if [ "$release_url" != "null" ]; then
            echo "Release exists, URL: $release_url"
            upload_url=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" | jq -r '.upload_url')
            echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      # 创建 GitHub Release（仅在 tag 触发且 Release 不存在时）
      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && steps.check_release.outputs.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 设置 upload_url（如果 Release 已存在，使用现有 URL）
      - name: Set upload_url
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: set_upload_url
        shell: bash  # 强制使用 Bash 解释器
        run: |
          if [ "${{ steps.check_release.outputs.release_exists }}" == "true" ]; then
            echo "upload_url=${{ steps.check_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          else
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
          fi

      # 上传 Release 资产（仅在 tag 触发时）
      - name: Upload Release Asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: dist/bili-hardcore${{ runner.os == 'Windows' && '.exe' || '' }}
          asset_name: bili-hardcore-${{ matrix.os }}-${{ github.ref_name }}${{ runner.os == 'Windows' && '.exe' || '' }}
          asset_content_type: application/octet-stream